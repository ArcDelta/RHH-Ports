#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="patchlog.txt"
LOGERR="patcherr.txt"

# Redirect output and error to the log file
> "$GAMEDIR/$LOGFILE" && exec > >(tee "$GAMEDIR/$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    $ESUDO umount "$DOTNETDIR" 2>/dev/null || true
    $ESUDO umount "$TOOLKIT" 2>/dev/null || true
    # Exit script, or return if sourced
    return 1 2>/dev/null || exit 1
}

# Mount the GMToolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
    $ESUDO mkdir -p "$TOOLKIT"
    $ESUDO umount "$TOOLKIT" 2>/dev/null || true
    $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
    echo "This port requires the GMToolkit runtime. Please download it."
    sleep 2
    patch_failure
fi

# Exports
export PATH="$DOTNETDIR:$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="ufo50.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
chmod 666 /dev/uinput

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(which zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

# Prepare game data
# If there are audiogroups in the ufo50.port file, unzip them
prepare_files() {
    # Delete unnecessary files
    rm -rf $DATADIR/*.exe $DATADIR/*.dll $DATADIR/.gitkeep
    echo "Removed unnecessary files"
    
    # Check if we're using a prepatched game
    if unzip -l "$DATAFILE" "assets/*" | grep -q "assets/.*\.dat"; then
        echo "Prepatched game detected."
        PREPATCH=1
        unzip_audiogroups || { patch_failure; return 1; }
    fi
}

# Unzip audiogroups
unzip_audiogroups() {
    # Unzip from $DATAFILE into $DATADIR
    echo "Unzipping ${DATAFILE}..."
    mkdir -p assets
    unzip -j -o "$DATAFILE" "assets/*.dat" -d "$DATADIR"
    if [ $? -eq 0 ]; then
        echo "Unzipped successfully to $DATADIR."
    else
        echo "Failed to unzip file."
        return 1
    fi
}

# Apply the xdelta patch (v1.7.8.21)
apply_xdelta() {
    # Check if the data.win file exists and apply xdelta
    if [ -f "$DATADIR/data.win" ]; then
        # v1.7.6
        output=$($controlfolder/xdelta3 -d -s "$DATADIR/data.win" -f "./tools/patches/ufo50.xdelta" "$DATADIR/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch applied successfully"
            echo "$output"
            rm "$DATADIR/data.win"
        else
            echo "Failed to apply patch: $output"
            return 1
        fi
    else
        echo "No data.win found to patch!"
        return 1
    fi
}

# Compress audio files inside datafile and audiogroups
compress_audio() {
    # Purge cache before operations
    rm -rf "$TMPDIR/"*
    
    # Test for data.win
    if [ -f "$DATADIR/data.win" ]; then
        mv "$DATADIR/data.win" "$DATADIR/game.droid"
    fi

    # Run the compression tool
    PYTHON=$(which python3)
    if [ "$PREPATCH" != 1 ]; then
        echo "Running GMTools on data and audiogroups."
        $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"
    else
        echo "Running GMTools on data file only."
        $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -O 0 -m 1000 -b 64 -r -d "$TMPDIR" "$DATADIR/game.droid"
    fi

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        echo "Moved compressed files to $DATADIR."
        rm -rf "$TMPDIR"
        echo "Temporary directory $TMPDIR removed."
        echo "Audio compression applied successfully."
    else
        # Failure
        echo "Audio compression failed
        ."
        rmdir "$TMPDIR"
        return 1
    fi
}

# Zip it all into the .port file
zip_archive() {
        zip -r -0 $DATAFILE ./assets/
        mkdir -p saves
        rm -rf $DATADIR/*
}

# Main function
process_game() {
    echo "Preparing game files..."
    prepare_files
    echo "Applying xdelta patch..."
    apply_xdelta || { patch_failure; return 1; }
    echo "Compressing audio..."
    compress_audio || { patch_failure; return 1; }
    echo "Finishing up..."
    zip_archive || { patch_failure; return 1; }
}

# Call main
if ! process_game; then
    echo "Patching process failed!"
    mv "$LOGFILE" "$LOGERR"
else
    echo "Patching process complete!"
fi

# Unmount runtimes
$ESUDO umount "$DOTNETDIR" 2>/dev/null || true
$ESUDO umount "$TOOLKIT" 2>/dev/null || true
