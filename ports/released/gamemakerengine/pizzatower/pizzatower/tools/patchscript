#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
LOGERR="$GAMEDIR/patchlog_error.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    mv "$LOGFILE" "$LOGERR"
    echo "Patching process failed."
    exit 1
}

# Mount the GMToolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
    $ESUDO mkdir -p "$TOOLKIT"
    $ESUDO umount "$RUNTIME" || true
    $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
    echo "This port requires the GMToolkit runtime. Please download it."
    sleep 2
    patch_failure
fi

# Mount the dotnet runtime
DOTNETDIR="$HOME/mono"
DOTNETFILE="$controlfolder/libs/dotnet-8.0.12.squashfs"
if [ -f "$DOTNETFILE" ]; then
    $ESUDO mkdir -p "$DOTNETDIR"
    $ESUDO umount "$DOTNETFILE" || true
    $ESUDO mount "$DOTNETFILE" "$DOTNETDIR"
else
    echo "This port requires the Dotnet runtime. Please download it."
    sleep 2
    patch_failure
fi

# Exports
export PATH="$DOTNETDIR:$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export LICENSEDIR="$GAMEDIR/licenses/pizzatower"
export DATAFILE="pizzatower.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
chmod 666 /dev/uinput

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(which zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

prepare_assets() {
    # Delete files we don't need
    rm -rf "$DATADIR"/*.exe "$DATADIR"/*.dll "$DATADIR"/.gitkeep
    
    # Create the savedir
    mkdir -p "$SAVEDIR"
    
    # Temporarily move sounds to the savedir
    mv "$DATADIR/sound" "$SAVEDIR/sound"
    
    # Move game licenses to our license folder
    mkdir -p "$LICENSEDIR"
    [ -d "$DATADIR/licenses" ] && mv "$DATADIR/licenses/"* "$LICENSEDIR"
    rmdir "$DATADIR/licenses"
}

# Clean out $DATAFILE except for the library we need
purge_datafile() {
    # Clean and recreate the TMPDIR
    rm -rf "$TMPDIR" && mkdir -p "$TMPDIR"

    # Attempt to unzip
    if ! unzip -q "$DATAFILE" "lib/*" -d "$TMPDIR"; then
        echo "[PURGE_DATAFILE]: Failed to unzip $DATAFILE"
        patch_failure
    fi

    # Remove unwanted architecture
    if [ -d "$TMPDIR/lib/armeabi-v7a" ]; then
        rm -rf "$TMPDIR/lib/armeabi-v7a"
    fi

    # Repackage the cleaned content
    rm -f "$DATAFILE"
    cd "$TMPDIR"

    if ! zip -r -0 -q "$GAMEDIR/$(basename "$DATAFILE")" .; then
        echo "[PURGE_DATAFILE]: Failed to create new datafile."
        patch_failure
    fi

    cd "$GAMEDIR"
    echo "Data file repackaged successfully."
}

# Externalize game textures with compression
dump_textures() {
    # Purge cache before operations
    rm -rf "$TMPDIR/"*
    
    # Begin texture operations
    dotnet "$TOOLKIT/utmt-cli/UndertaleModCli.dll" \
        dump "$DATADIR/data.win" \
        -e "$DATADIR/textures" "$DATADIR/game.droid"

    if [ $? -ne 0 ]; then
        echo "[DOTNET]: Patch failed to apply."
        exit 1
    else
        rm -f "$DATADIR/data.win"
        mv "$DATADIR/textures/" "$SAVEDIR/textures/"
        [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"/*
    fi
}

# Add assets to $DATAFILE
zip_archive() {
        echo "Finishing up..."
        zip -r -0 "$DATAFILE" ./assets/
        rm -rf "$DATADIR"/*
        mv "$SAVEDIR/sound" "$DATADIR/sound"
        mv "$SAVEDIR/textures" "$DATADIR/textures"
        sleep 1
}

# Main calls
process_game() {
    prepare_assets || { echo "Patching process failed."; exit 1; }
    purge_datafile || { echo "Patching process failed."; exit 1; }
    dump_textures || { echo "Patching process failed."; exit 1; }
    zip_archive || { echo "Patching process failed."; exit 1; }
    sleep 1
    
    # Unmount runtimes
    $ESUDO umount "$DOTNETDIR"
    $ESUDO umount "$TOOLKIT"
    
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game
