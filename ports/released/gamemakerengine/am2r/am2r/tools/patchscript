#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="patchlog.txt"
LOGERR="patcherr.txt"

# Redirect output and error to the log file
> "$GAMEDIR/$LOGFILE" && exec > >(tee "$GAMEDIR/$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    $ESUDO umount "$TOOLKIT" 2>/dev/null || true
    # Exit script, or return if sourced
    return 1 2>/dev/null || exit 1
}

# Exports
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="am2r.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
$ESUDO chmod 666 /dev/uinput

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

check_deps() {
    # Test for commands: python, zip, unzip
    PYTHON=$(command -v python3)
    if [ -z "$PYTHON" ]; then
        echo "Missing Python!"
        return 1
    fi

    ZIP=$(command -v zip)
    if [ -z "$ZIP" ]; then
        echo "Missing zip!"
        return 1
    fi

    UNZIP=$(command -v unzip)
    if [ -z "$UNZIP" ]; then
        echo "Missing unzip!"
        return 1
    fi
}

unzip_archives() {
    # Create am2r and am2rlauncher folders
    mkdir -p "$DATADIR/am2r" && mkdir -p "$DATADIR/am2rpatch"

    # Identify AM2R zip (has data.win in root)
    AM2R_ZIP=$(find "$DATADIR" -maxdepth 1 -type f -name "*.zip" -exec sh -c '
        for file; do
            if "$1" -l "$file" | grep -qE "^\s+[0-9]+\s+[0-9-]+\s+[0-9:]+\s+data\.win$"; then
                echo "$file"
                break
            fi
        done
    ' _ "$UNZIP" {} +)

    # Identify autopatcher zip (has AM2R-Autopatcher-Windows-master/data/ folder)
    AUTOPATCHER_ZIP=$(find "$DATADIR" -maxdepth 1 -type f -name "*.zip" -exec sh -c '
        for file; do
            if "$1" -l "$file" | grep -q "AM2R-Autopatcher-Windows-master/data/$"; then
                echo "$file"
                break
            fi
        done
    ' _ "$UNZIP" {} +)
    
    AM2R16B_ZIP="AM2R_1.6b2_windows.zip"

    # Check if AM2R zip was found
    if [ -z "$AM2R_ZIP" ]; then
        echo "Error: No valid AM2R zip file found in $DATADIR (must have data.win in root)."
        return 1
    fi

    # Check if autopatcher zip was found
    if [ -z "$AUTOPATCHER_ZIP" ]; then
        echo "Did not find autopatcher zip. High quality sounds will be missing."
    fi
    
    # Check if 1.6b patch exists
    if [ ! -f "$DATADIR/$AM2R16B_ZIP" ]; then
        echo "AM2R 1.6b patch not found. Please add it to the assets folder."
        return 1
    fi

    # Unzip AM2R zip to its folder
    $UNZIP "$AM2R_ZIP" -d "$DATADIR/am2r" 2>/dev/null

    # Unzip autopatcher zip to its folder
    $UNZIP "$AUTOPATCHER_ZIP" -d "$DATADIR/am2rpatch" 2>/dev/null
}

prepare_files() {
    # AM2R: Delete unnecessary files
    rm -rf  "$DATADIR/am2r/"*.exe "$DATADIR/am2r/"*.dll \
            "$DATADIR/.gitkeep" "$DATADIR/am2r/"*.txt 
    echo "Removed unnecessary files"
    
    # AM2RPATCH: Move files
    if [ -n "$AUTOPATCHER_ZIP" ]; then
        echo "Moving patch files to $DATADIR/am2r"
        rsync -a "$DATADIR/am2rpatch/AM2R-Autopatcher-Windows-master/data/files_to_copy/"* "$DATADIR/am2r/"
    fi
    
    # Unzip the 1.6b archive
    $UNZIP "$DATADIR/$AM2R16B_ZIP" -d "$DATADIR/am2r16b"
    
    # Copy files
    echo "Moving 1.6b2 files..."
    rsync -a "$DATADIR/am2r16b/files_to_copy/"* "$DATADIR/am2r/"
    if [ -n "$AUTOPATCHER_ZIP" ]; then
        rsync -a "$DATADIR/am2rpatch/AM2R-Autopatcher-Windows-master/data/HDR_HQ_in-game_music/"* "$DATADIR/am2r/"
    fi
    DATA="$DATADIR/am2r/data.win"
    PATCH="$DATADIR/am2r16b/data.xdelta"
}

apply_xdelta() {
    # Check if the data.win file exists and apply xdelta
    if [ -f "$DATADIR/am2r/data.win" ]; then
        output=$($controlfolder/xdelta3 -d -s "$DATA" -f "$PATCH" "$DATADIR/am2r/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch applied successfully"
            echo "$output"
            rm -rf "$DATA" && rm -rf "$DATADIR/am2rpatch"
        else
            # If this happens, it's not AM2R 1.1
            echo "Failed to apply patch"
            echo "$output"
            exit 1
        fi
    else
        # This shouldn't be reachable, but we'll do a safety check anyway
        echo "No data.win file found to patch!"
        exit 1
    fi
}

clean_files() {  
    mkdir -p "$TMPDIR"

    # Move everything from am2r into TMPDIR
    if [ -d "$DATADIR/am2r" ]; then
        mv "$DATADIR/am2r/"* "$TMPDIR/" 2>/dev/null
        mv "$DATADIR/am2r/".* "$TMPDIR/" 2>/dev/null || true  # Hidden files (except . and ..)
        rmdir "$DATADIR/am2r" 2>/dev/null || true
    fi

    # Clean all contents of assets directory (DATADIR)
    rm -rf "$DATADIR/"*

    # Move everything back from TMPDIR to DATADIR
    mv "$TMPDIR/"* "$DATADIR/" 2>/dev/null
    mv "$TMPDIR/".* "$DATADIR/" 2>/dev/null || true  # Hidden files again

    # Clean TMPDIR
    rm -rf "$TMPDIR/"*
}

zip_archive() {
    $ZIP -r -0 "$DATAFILE" ./assets/
    echo "Zipped contents to $DATAFILE"
    [ -n "$DATADIR" ] && rm -rf "$DATADIR"/*
}

process_game() {
    echo "Checking for dependencies..."
    check_deps || { patch_failure; return 1; }
    
    echo "Unzipping archives..."
    unzip_archives || { patch_failure; return 1; }
    
    echo "Preparing game..."
    prepare_files || { patch_failure; return 1; }
    
    echo "Applying 1.6b2 patch..."
    apply_xdelta || { patch_failure; return 1; }
    
    echo "Cleaning excess files..."
    clean_files || { patch_failure; return 1; }

    echo "Finishing up..."
    zip_archive || { patch_failure; return 1; }
}

# Call the function
if ! process_game; then
    echo "Patching process failed!"
    mv "$LOGFILE" "$LOGERR"
else
    echo "Patching process complete!"
fi
