#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="patchlog.txt"
LOGERR="patcherr.txt"

# Redirect output and error to the log file
> "$GAMEDIR/$LOGFILE" && exec > >(tee "$GAMEDIR/$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    $ESUDO umount "$DOTNETDIR" 2>/dev/null || true
    $ESUDO umount "$TOOLKIT" 2>/dev/null || true
    # Exit script, or return if sourced
    return 1 2>/dev/null || exit 1
}

# Mount the GMToolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
    $ESUDO mkdir -p "$TOOLKIT"
    $ESUDO umount "$TOOLKIT" 2>/dev/null || true
    $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
    echo "This port requires the GMToolkit runtime. Please download it."
    sleep 2
    patch_failure
fi

# Mount the dotnet runtime
DOTNETDIR="$HOME/mono"
DOTNETFILE="$controlfolder/libs/dotnet-8.0.12.squashfs"
if [ -f "$DOTNETFILE" ]; then
    $ESUDO mkdir -p "$DOTNETDIR"
    $ESUDO umount "$DOTNETDIR" 2>/dev/null || true
    $ESUDO mount "$DOTNETFILE" "$DOTNETDIR"
else
    echo "This port requires the Dotnet runtime. Please download it."
    sleep 2
    patch_failure
fi

# Exports
export PATH="$DOTNETDIR:$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
export LD_LIBRARY_PATH="$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="stonebuddha.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
chmod 666 /dev/uinput

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Test for commands: python, zip
PYTHON=$(command -v python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(command -v zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

unzip_game() {
    cd "$DATADIR"
    EXE="arrest of a stone buddha.exe"
    
    # Verify the executable
    if [ ! -f "$DATADIR/$EXE" ]; then
        echo "Did not find $EXE!"
        cd "$GAMEDIR"
        return 1
    fi
    
    # Try to extract
    UNZIP="$controlfolder/7zzs.${DEVICE_ARCH}"
    if ! $UNZIP x -aoa "$DATADIR/$EXE"; then
        echo "Could not unzip $EXE!"
        cd "$GAMEDIR"
        return 1
    fi
    
    cd "$GAMEDIR"
}

prepare_files() {
    mkdir -p "$SAVEDIR"
    
    # Delete excess files
    find "$DATADIR" -type f \( \
        -name "*.gitkeep" -o -name "*.exe" -o -name "*.dll" -o -name "*.hashdb" -o \
        -name "*.ico" -o -name "*.lnk" -o -name "*.msg" -o -name "*.zip" \
    \) -exec rm -f {} \;

    # Move splash file if it exists
    if [ -f "$DATADIR/splash.png" ]; then
        mv "$DATADIR/splash.png" "$GAMEDIR/splash.png"
    fi

    # Handle DB@ files
    mkdir -p "$DATADIR/DB"
    for f in "$DATADIR"/DB@*; do
        [ -e "$f" ] || continue
        base="$(basename "$f")"
        mv -f "$f" "$DATADIR/DB/${base#DB@}"
    done

    # Handle Music@ files
    mkdir -p "$SAVEDIR/Music"
    for f in "$DATADIR"/Music@*; do
        [ -e "$f" ] || continue
        base="$(basename "$f")"
        mv -f "$f" "$SAVEDIR/Music/${base#Music@}"
    done
    
    # Edit options.ini
    if [ -f "$DATADIR/options.ini" ]; then
        sed -i 's/CreateTexturesOnDemand=0/CreateTexturesOnDemand=1/' "$DATADIR/options.ini"
    else
        echo "Error: options.ini missing!"
    fi
}

# Dump game code entries from data.win
dump_code() {
    # Purge cache before operations
    rm -rf "$TMPDIR/"*

    # Specify which code entries to extract
    CODE_ENTRIES=(
        "gml_Script_screen_init"
    )

    CODEARGS=""
    for entry in "${CODE_ENTRIES[@]}"; do
        CODEARGS="$CODEARGS --code $entry"
    done

    echo "Dumping GML scripts: ${CODE_ENTRIES[*]}"

    dotnet "$TOOLKIT/utmt-cli/UndertaleModCli.dll" \
        dump "$DATADIR/data.win" \
        -o "$TMPDIR" \
        $CODEARGS

    if [ $? -ne 0 ]; then
        echo "Failed to dump GML scripts."
        return 1
    fi

    echo "GML scripts dumped to $TMPDIR"
}

modify_code() {
    # Modify the extracted gml
    $PYTHON "$GAMEDIR/tools/mod.py" "$TMPDIR/CodeEntries"
    if [ $? -ne 0 ]; then
        echo "Failed to modify GML scripts."
        return 1
    fi
}

# Replace game code entries for data.win
replace_code() {
    # Build --code args from all gml files
    CODEARGS=""
    for file in "$TMPDIR/CodeEntries/"*.gml; do
        [ -f "$file" ] || continue
        entry=$(basename "$file" .gml)
        echo "Will replace gml script: $file"
        CODEARGS="$CODEARGS --code $entry=$file"
    done

    # Begin replace operations
    dotnet "$TOOLKIT/utmt-cli/UndertaleModCli.dll" \
        replace "$DATADIR/data.win" \
        -o "$DATADIR/data2.win" \
        $CODEARGS

    if [ $? -ne 0 ]; then
        echo "Failed to replace gml scripts."
        return 1
    else
        echo "Successfully replaced gml scripts."
        rm -f "$DATADIR/data.win"
        mv "$DATADIR/data2.win" "$DATADIR/data.win"
        [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"/*
    fi
}

# Toggle GeneralInfo flags via envars - see https://github.com/UnderminersTeam/UndertaleModTool/blob/master/UndertaleModLib/Models/UndertaleGeneralInfo.cs for options
set_flags() {
    export SET_FLAGS="Fullscreen"
    export CLEAR_FLAGS="Scale"
    dotnet "$TOOLKIT/utmt-cli/UndertaleModCli.dll" \
        load "$DATADIR/data.win" \
        -s "$GAMEDIR/tools/toggleflags.csx" \
        -o "$DATADIR/data2.win"
        
    if [ $? -ne 0 ]; then
        echo "Failed to toggle info flags."
        return 1
    else
        echo "Successfully toggled info flags."
        rm -f "$DATADIR/data.win"
        mv "$DATADIR/data2.win" "$DATADIR/data.win"
        [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"/*
    fi
}

compress_audio() {   
    # Test for data.win
    if [ -f "$DATADIR/data.win" ]; then
        mv "$DATADIR/data.win" "$DATADIR/game.droid"
    fi
    
    # Do audio compression
    if $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"; then
        mv "$TMPDIR/"* "$DATADIR" && rmdir "$TMPDIR"
        echo "Audio compression applied successfully."
    else
        # Failure
        echo "Audio compression failed for $GAMEFILE."
        rmdir "$TMPDIR"
        return 1
    fi
}

zip_archive() {
        zip -r -0 "$DATAFILE" ./assets/
        echo "Zipped contents to $DATAFILE"
        rm -rf "$DATADIR/"*
}

process_game() {
    echo "Unzipping executable..."
    unzip_game
    echo "Preparing game..."
    prepare_files || { patch_failure; return 1; }
    echo "Setting info flags..."
    set_flags || { patch_failure; return 1; }
    echo "Dumping game code..."
    dump_code || { patch_failure; return 1; }
    echo "Modifying gml scripts..."
    modify_code || { patch_failure; return 1; }
    echo "Repacking gml scripts..."
    replace_code || { patch_failure; return 1; }
    echo "Compressing audio..."
    compress_audio || { patch_failure; return 1; }
    echo "Finishing up..."
    zip_archive || { patch_failure; return 1; }
}

# Call the function
if ! process_game; then
    echo "Patching process failed!"
    mv "$LOGFILE" "$LOGERR"
else
    echo "Patching process complete!"
fi

# Unmount runtimes
$ESUDO umount "$DOTNETDIR" 2>/dev/null || true
$ESUDO umount "$TOOLKIT" 2>/dev/null || true
