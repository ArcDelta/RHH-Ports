#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
START_TIME=$(date +%s)

# Redirect output and error to the log file
rm -rf $LOGFILE $LOGERR
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="$GAMEDIR/grappledog.port"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

prepare_assets() {
    # Delete files we don't need
    rm -rf "$DATADIR"/*.exe "$DATADIR"/*.dll "$DATADIR"/*.pdf "$DATADIR"/.gitkeep
    
    # Create the savedir
    mkdir -p $SAVEDIR
    
    # Temporarily move sounds to the savedir
    mv $DATADIR/fmodBanks $SAVEDIR/fmodBanks
}

# Add assets to $DATAFILE
zip_archive() {
        echo "Finishing up..."
        zip -r -0 $DATAFILE ./assets/
        rm -rf "$DATADIR"/*
        mv "$SAVEDIR/fmodBanks" "$DATADIR/fmodBanks"
        sleep 1
}

# Main calls
process_game() {
    prepare_assets || { echo "Patching process failed."; exit 1; }
    zip_archive || { echo "Patching process failed."; exit 1; }
    sleep 1
    
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game
