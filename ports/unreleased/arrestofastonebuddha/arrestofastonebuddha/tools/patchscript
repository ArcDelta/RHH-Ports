#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="patchlog.txt"
LOGERR="patcherr.txt"

# Redirect output and error to the log file
> "$GAMEDIR/$LOGFILE" && exec > >(tee "$GAMEDIR/$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    $ESUDO umount "$TOOLKIT" 2>/dev/null || true
    # Exit script, or return if sourced
    return 1 2>/dev/null || exit 1
}

# Mount the GMToolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
    $ESUDO mkdir -p "$TOOLKIT"
    $ESUDO umount "$TOOLKIT" 2>/dev/null || true
    $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
    echo "This port requires the GMToolkit runtime. Please download it."
    sleep 2
    patch_failure
fi

# Exports
export PATH="$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
export LD_LIBRARY_PATH="$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="stonebuddha.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
chmod 666 /dev/uinput

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(which zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

unzip_game() {

    cd "$DATADIR"
    EXE="arrest of a stone buddha.exe"
    
    # Verify the executable
    if [ ! -f "$DATADIR/$EXE" ]; then
        echo "Did not find $EXE!"
        return 1
    fi
    
    # Try to extract
    UNZIP="$controlfolder/7zzs.${DEVICE_ARCH}"
    if ! $UNZIP x -aoa "$DATADIR/$EXE"; then
        echo "Could not unzip $EXE!"
        cd "$GAMEDIR"
        return 1
    fi
    
    cd "$GAMEDIR"
}

prepare_files() {
    mkdir -p "$SAVEDIR"
    
    # Delete excess files
    find "$DATADIR" -type f \( \
        -name "*.exe" -o -name "*.dll" -o -name "*.hashdb" -o \
        -name "*.ico" -o -name "*.lnk" -o -name "*.msg" -o -name "*.zip" \
    \) -exec rm -f {} \;

    # Handle DB@ files
    mkdir -p "$DATADIR/DB"
    for f in "$DATADIR"/DB@*; do
        [ -e "$f" ] || continue
        base="$(basename "$f")"
        mv -f "$f" "$DATADIR/DB/${base#DB@}"
    done

    # Handle Music@ files
    mkdir -p "$SAVEDIR/Music"
    for f in "$DATADIR"/Music@*; do
        [ -e "$f" ] || continue
        base="$(basename "$f")"
        mv -f "$f" "$SAVEDIR/Music/${base#Music@}"
    done
    
    # Edit options.ini
    if [ -f "$DATADIR/options.ini" ]; then
        sed -i 's/CreateTexturesOnDemand=0/CreateTexturesOnDemand=1/' "$DATADIR/options.ini"
    else
        echo "Error: options.ini missing!"
        return 1
    fi
}

# Apply a patch to enforce stretching to fill the display
apply_xdelta() {
    STEAM_MD5="b2d12cf126dea1e65ae39780a63d5da5"

    if [ -f "$DATADIR/data.win" ]; then
        checksum=$(md5sum "$DATADIR/data.win" | awk '{print $1}')
        case "$checksum" in
            "$STEAM_MD5")
                PATCH="stonebuddha_steam.xdelta"
                ;;
            *)
                echo "Unknown data.win checksum: $checksum"
                return 1
                ;;
        esac

        if [ -f "$GAMEDIR/tools/$PATCH" ]; then
            output=$($controlfolder/xdelta3 -d -s "$DATADIR/data.win" -f "$GAMEDIR/tools/$PATCH" "$DATADIR/data2.win" 2>&1)
            if [ $? -eq 0 ]; then
                echo "Patch applied successfully"
                echo "$output"
                rm "$DATADIR/data.win" && mv "$DATADIR/data2.win" "$DATADIR/data.win"
            else
                echo "Failed to apply patch"
                echo "$output"
                return 1
            fi
        else
            echo "Patch file not found: $GAMEDIR/tools/$PATCH"
            return 1
        fi
    else
        echo "data.win not found in $DATADIR"
        return 1
    fi
}

compress_audio() {
    # Test for data.win
    if [ -f "$DATADIR/data.win" ]; then
        mv "$DATADIR/data.win" "$DATADIR/game.droid"
    fi
    
    # Do audio compression
    if $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"; then
        mv "$TMPDIR/"* "$DATADIR" && rmdir "$TMPDIR"
        echo "Audio compression applied successfully."
    else
        # Failure
        echo "Audio compression failed for $GAMEFILE."
        rmdir "$TMPDIR"
        return 1
    fi
}

zip_archive() {
        zip -r -0 "$DATAFILE" ./assets/
        echo "Zipped contents to $DATAFILE"
        rm -rf "$DATADIR/"*
}

process_game() {
    echo "Unzipping executable..."
    unzip_game || { patch_failure; return 1; }
    
    echo "Preparing game..."
    prepare_files || { patch_failure; return 1; }
    
    echo "Applying xdelta..."
    apply_xdelta || { patch_failure; return 1; }

    echo "Compressing audio..."
    compress_audio || { patch_failure; return 1; }

    sleep 1
    echo "Finishing up..."
    zip_archive || { patch_failure; return 1; }
}

# Call the function
if ! process_game; then
    echo "Patching process failed!"
    mv "$LOGFILE" "$LOGERR"
else
    echo "Patching process complete!"
fi

# Unmount runtimes
$ESUDO umount "$TOOLKIT" 2>/dev/null || true
